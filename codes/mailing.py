import time
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
import os
import smtplib
import os
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from datetime import datetime
import pandas as pd

import extras
import my_gui
import main_processing


# from main_processing import store_employee_data
def process_employee_data_for_email():

    extras.show_command_prompt()
    # print("We are now going to process employees for sending the emails!")
    
    store_employee_data = main_processing.store_employee_data
    # print(store_employee_data)
    
    # Check if store_employee_data is empty
    if store_employee_data is None or store_employee_data.empty:
        extras.print_colored("No employee data found.", "red")

        # print("No employee data found.")
        return

    # Iterate over each row in the DataFrame
    for index, row in store_employee_data.iterrows():
        # Check if the 'checked' column is 'yes' (assuming 'yes' is a string in the 'checked' column)
        if row['Checked'] == 'Yes':  # Or use `True` if it's a boolean

            # Extract the relevant data
            Employee_Name = row['Employee_Name']
            recipient_email = row['MailID']
            Last_Invoice_Date = row['Last_Invoice_Date']
            month = row['Month']
            email_remark = row['Email_Remark']

            # Call the send_email function
            status = send_email(Employee_Name, recipient_email, Last_Invoice_Date, month, email_remark)

            # Check if the status is False
            if status == False:
                # Format the current timestamp
                current_timestamp = datetime.now().strftime('%Y-%m-%d %I:%M:%S %p')
                status = f"Failed - {current_timestamp}"

            column_name = "Email_Send"
            
            # Update email status
            extras.update_email_status(Employee_Name, status, column_name)





def send_email(Employee_Name, recipient_email, Last_Invoice_Date, month, email_remark):
    try:

        print("Starting the email process...")

        managername, managermail = extras.get_manager_info()

        # Sender and credentials
        sender_email = "shaikhfahad3210@gmail.com"
        sender_password = "mdylniofdnjbnhvn"  # Consider storing this securely
        # print(f"Sender email: {sender_email}")

        # Email Subject and Body
        subject = f"Auto-Generated Invoice for {month}"
        body1 = f"Dear {Employee_Name},\n\nInvoice for the month of {month}."
        body2 = f"\nManager Name : {managername}.\nThis is an autogenerated email.\n\nRegards,\nPFEPL Invoice Automation Tool."

        if email_remark != "":
            remark = f"\n\nThe remark is {email_remark}"
            body =  body1 + remark + body2 
        else:
            body = body1 + body2 

        
        # body = f"Dear {Employee_Name},\nPlease find your invoice for the month of {month}. \nThis is an autogenerated email.\n\nRegards,\nPFEPL Invoice Automation Tool."
        # print(f"Email subject: {subject}")
        # print(f"Email body: {body}")

        # Attachment path
        attachment_path = fr"../output/{Last_Invoice_Date}/invoice_{Employee_Name}.xlsx"
        # print(f"Attachment path: {attachment_path}")

        # Set up the SMTP server and login
        # print("Connecting to SMTP server...")
        with smtplib.SMTP('smtp.gmail.com', 587) as server:
            # print("Starting TLS encryption...")
            server.starttls()  # Start TLS encryption

            print(f"Logging in with sender email: {sender_email}")
            server.login(sender_email, sender_password)  # Login with your email and password
            # print("Login successful!")

            # Create the email message
            # print("Creating the email message...")
            msg = MIMEMultipart()
            msg['From'] = sender_email
            msg['To'] = recipient_email
            msg['Subject'] = subject
            print(f"Recipient email: {recipient_email}")

            # Add CC recipients
            cc_emails = ["shaikhfahad3210@gmail.com", "shaikhfahad3210@gmail.com", managermail]
            msg['Cc'] = ', '.join(cc_emails)
            recipients = [recipient_email] + cc_emails  # To send email to both "To" and "Cc" recipients
            # print(f"CC recipients: {cc_emails}")

            # Attach the body to the email
            # print("Attaching body to the email...")
            msg.attach(MIMEText(body, 'plain'))

            # Attach the Excel file if provided
            if attachment_path and os.path.exists(attachment_path):
                # print(f"Attachment found")
                filename = os.path.basename(attachment_path)
                # print(f"Attachment filename: {filename}")
                
                with open(attachment_path, 'rb') as attachment:
                    # print(f"Reading the attachment file: {attachment_path}")
                    part = MIMEBase('application', 'octet-stream')
                    part.set_payload(attachment.read())
                    encoders.encode_base64(part)
                    part.add_header('Content-Disposition', f'attachment; filename={filename}')
                    print(f"Attachment added to mail: {filename}")
                    msg.attach(part)
            else:
                print(f"Attachment file not found at {attachment_path}")
        
            # Send the email
            print("Sending the email...")
            server.sendmail(sender_email, recipients, msg.as_string())
            extras.print_colored(f"Email sent successfully to {Employee_Name}", "green")

            # print("Email sent successfully!")

        # If everything is successful, return True
        return "Pass"

    except smtplib.SMTPException as e:
        extras.print_colored(f"SMTP error occurred: {e}", "red")

        # print(f"SMTP error occurred: {e}")
        return False
    except Exception as e:
        extras.print_colored(f"Failed to send email. Error: {e}", "red")

        # print(f"Failed to send email. Error: {e}")
        return False


